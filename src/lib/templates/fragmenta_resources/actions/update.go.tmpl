package [[ .fragmenta_resource ]]actions

import (

	"github.com/fragmenta/router"
	"github.com/fragmenta/view"

	"[[ .fragmenta_app_path ]]/[[ .fragmenta_resources ]]"
    "[[ .fragmenta_app_path ]]/lib/authorise"
)

// HandleUpdateShow renders the form to update a [[ .fragmenta_resource ]]
func HandleUpdateShow(context router.Context) error {
	
    // Find the [[ .fragmenta_resource ]]
	[[ .fragmenta_resource ]], err := [[ .fragmenta_resources ]].Find(context.ParamInt("id"))
	if err != nil {
		return router.NotFoundError(err)	
    }

	// Authorise update [[ .fragmenta_resource ]]
	err = authorise.Resource(context, [[ .fragmenta_resource ]]) 
    if err != nil {
		return router.NotAuthorizedError(err)	
    }

    // Render the template
	view := view.New(context)
	view.AddKey("[[ .fragmenta_resource ]]", [[ .fragmenta_resource ]])

    return view.Render()
}

// HandleUpdateShow handles the POST of the form to update a [[ .fragmenta_resource ]]
func HandleUpdate(context router.Context) error {

	// Find the [[ .fragmenta_resource ]]
	[[ .fragmenta_resource ]], err := [[ .fragmenta_resources ]].Find(context.ParamInt("id"))
	if err != nil {
		return router.NotFoundError(err)	
    }

	// Authorise update [[ .fragmenta_resource ]]
	err = authorise.Resource(context, [[ .fragmenta_resource ]])
    if err != nil {
		return router.NotAuthorizedError(err)	
    }

	// Update the [[ .fragmenta_resource ]] from params
	params, err := context.Params()
	if err != nil {
		return router.InternalError(err)		
	}
	err = [[ .fragmenta_resource ]].Update(params.Map())
    if err != nil {
		return router.InternalError(err)		
	}


	// Redirect to [[ .fragmenta_resource ]]
	return router.Redirect(context, [[ .fragmenta_resource ]].URLShow() )
}
