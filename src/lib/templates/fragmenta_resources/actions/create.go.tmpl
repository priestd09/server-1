package [[ .fragmenta_resource ]]actions

import (

	"github.com/fragmenta/router"
	"github.com/fragmenta/view"

	"[[ .fragmenta_app_path ]]/[[ .fragmenta_resources ]]"
    "[[ .fragmenta_app_path ]]/lib/authorise"
)

// HandleCreateShow serves the create form via GET for [[ .fragmenta_resources ]]
func HandleCreateShow(context router.Context) error {

	// Authorise
	err := authorise.Path(context)
	if err != nil {
		return router.NotAuthorizedError(err)	
	}

	// Render the template
	view := view.New(context)
	[[ .fragmenta_resource ]] := [[ .fragmenta_resources ]].New()
	view.AddKey("[[ .fragmenta_resource ]]", [[ .fragmenta_resource ]])

    return view.Render()
}

// HandleCreate handles the POST of the create form for [[ .fragmenta_resources ]]
func HandleCreate(context router.Context) error {

	// Authorise
	err := authorise.Path(context)
    if err != nil {
		return router.NotAuthorizedError(err)	
    }
    

	// Setup context
	params, err := context.Params()
	if err != nil {
		return router.InternalError(err)
	}

	id, err := [[ .fragmenta_resources ]].Create(params.Map())
	if err != nil {
        return router.InternalError(err)
	}
    
    // Log creation
    context.Logf("#info Created [[ .fragmenta_resource ]] id,%d", id)
	
	// Redirect to the new [[ .fragmenta_resource ]]
	m, err := [[ .fragmenta_resources ]].Find(id)
	if err != nil {
        return router.InternalError(err)
	}

	return router.Redirect(context, m.URLIndex())
}
